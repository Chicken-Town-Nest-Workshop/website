"use strict";(self.webpackChunkchicken_city=self.webpackChunkchicken_city||[]).push([[3598],{9613:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>k});var n=t(9496);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,s=function(e,r){if(null==e)return{};var t,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=s,k=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return t?n.createElement(k,a(a({ref:r},u),{},{components:t})):n.createElement(k,a({ref:r},u))}));function k(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=m;var i={};for(var l in r)hasOwnProperty.call(r,l)&&(i[l]=r[l]);i.originalType=e,i[d]="string"==typeof e?e:s,a[1]=i;for(var c=2;c<o;c++)a[c]=t[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5997:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=t(8028),s=(t(9496),t(9613));const o={sidebar_position:10,description:"\u55ae\u5143\u6e2c\u8a66 mock",key:["NestJS","Node","TypeScript","Unit test"],tags:["NestJS","Node","TypeScript","Unit test"]},a="\ud83d\udc14  \u55ae\u5143\u6e2c\u8a66 mock",i={unversionedId:"test/unitTestMock",id:"test/unitTestMock",title:"\ud83d\udc14  \u55ae\u5143\u6e2c\u8a66 mock",description:"\u55ae\u5143\u6e2c\u8a66 mock",source:"@site/docs/test/unitTestMock.md",sourceDirName:"test",slug:"/test/unitTestMock",permalink:"/docs/test/unitTestMock",draft:!1,editUrl:"https://github.com/Chicken-Town-Nest-Workshop/website/tree/main/docs/test/unitTestMock.md",tags:[{label:"NestJS",permalink:"/docs/tags/nest-js"},{label:"Node",permalink:"/docs/tags/node"},{label:"TypeScript",permalink:"/docs/tags/type-script"},{label:"Unit test",permalink:"/docs/tags/unit-test"}],version:"current",lastUpdatedAt:1696858326,formattedLastUpdatedAt:"2023\u5e7410\u67089\u65e5",sidebarPosition:10,frontMatter:{sidebar_position:10,description:"\u55ae\u5143\u6e2c\u8a66 mock",key:["NestJS","Node","TypeScript","Unit test"],tags:["NestJS","Node","TypeScript","Unit test"]},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc14 \u7406\u89e3 Nest \u7684\u55ae\u5143\u6e2c\u8a66",permalink:"/docs/test/unitTest"},next:{title:"\ud83d\udc14  \u55ae\u5143\u6e2c\u8a66\u5be6\u4f5c",permalink:"/docs/test/createUnitTest"}},l={},c=[{value:"\u95dc\u65bc mock",id:"\u95dc\u65bc-mock",level:2},{value:"\u9032\u884c\u908f\u8f2f\u6e2c\u8a66",id:"\u9032\u884c\u908f\u8f2f\u6e2c\u8a66",level:2},{value:"\u62c6\u5206\u908f\u8f2f\u5c64\u8207\u8cc7\u6599\u5c64",id:"\u62c6\u5206\u908f\u8f2f\u5c64\u8207\u8cc7\u6599\u5c64",level:3},{value:"\u8a3b\u518a repository",id:"\u8a3b\u518a-repository",level:3},{value:"\u5148\u5beb\u6e2c\u8a66",id:"\u5148\u5beb\u6e2c\u8a66",level:2},{value:"\u6e2c\u8a66\u524d\u7f6e",id:"\u6e2c\u8a66\u524d\u7f6e",level:3},{value:"\u9032\u884c\u6a21\u7d44\u8a3b\u518a",id:"\u9032\u884c\u6a21\u7d44\u8a3b\u518a",level:3},{value:"\u5be6\u4f8b\u5316\u670d\u52d9",id:"\u5be6\u4f8b\u5316\u670d\u52d9",level:3},{value:"\u50b3\u5beb\u6e2c\u8a66\u7528\u5047\u7269\u4ef6\u8207\u8cc7\u6599",id:"\u50b3\u5beb\u6e2c\u8a66\u7528\u5047\u7269\u4ef6\u8207\u8cc7\u6599",level:3},{value:"\u64b0\u5beb\u6e2c\u8a66\u5287\u60c5",id:"\u64b0\u5beb\u6e2c\u8a66\u5287\u60c5",level:2},{value:"\u9700\u6c42: \u53d6\u5f97\u5546\u5e97\u4f7f\u7528\u8005",id:"\u9700\u6c42-\u53d6\u5f97\u5546\u5e97\u4f7f\u7528\u8005",level:3},{value:"\u6e2c\u8a66\u7d30\u7bc0",id:"\u6e2c\u8a66\u7d30\u7bc0",level:3},{value:"\u57f7\u884c\u6e2c\u8a66",id:"\u57f7\u884c\u6e2c\u8a66",level:3},{value:"\u6e2c\u8a66\u7d50\u679c",id:"\u6e2c\u8a66\u7d50\u679c",level:3},{value:"\u5b8c\u6574\u6e2c\u8a66\u7a0b\u5f0f\u78bc",id:"\u5b8c\u6574\u6e2c\u8a66\u7a0b\u5f0f\u78bc",level:2},{value:"REF",id:"ref",level:2}],u={toc:c},d="wrapper";function p(e){let{components:r,...t}=e;return(0,s.kt)(d,(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"--\u55ae\u5143\u6e2c\u8a66-mock"},"\ud83d\udc14  \u55ae\u5143\u6e2c\u8a66 mock"),(0,s.kt)("h2",{id:"\u95dc\u65bc-mock"},"\u95dc\u65bc mock"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u55ae\u5143\u6e2c\u8a66\u4e2d\u96e3\u514d\u9700\u8981\u505a\u5230\u8cc7\u6599\u9694\u96e2\uff0c\u78ba\u4fdd\u6211\u6bcf\u6b21\u57f7\u884c\u90fd\u4fdd\u6301\u4e00\u81f4\u7684\u7d50\u679c"),(0,s.kt)("p",{parentName:"blockquote"},"mock \u5c31\u662f\u4e0d\u5c6c\u65bc\u9019\u500b\u6e2c\u8a66\u7bc4\u570d\u5916\u7684\u670d\u52d9\uff0c\u9032\u884c\u865b\u64ec\u5316")),(0,s.kt)("h2",{id:"\u9032\u884c\u908f\u8f2f\u6e2c\u8a66"},"\u9032\u884c\u908f\u8f2f\u6e2c\u8a66"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u76ee\u524d\u76ee\u9304\u7d50\u69cb")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"src\n\u2514\u2500user\n\u2502\n\u2514\u2500uuid\n\u2502\n\u2514\u2500error-check\n\u2502\n\u2514\u2500clock\n\u2502\n\u2514\u2500app.controller.spec.ts\n\u2502\n\u2514\u2500app.controller.ts\n\u2502\n\u2514\u2500app.module.ts\n\u2502\n\u2514\u2500app.service.ts\n\u2502\n\u2514\u2500main.ts\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u76ee\u524d user \u8cc7\u6599\u593e\u76ee\u9304\u7d50\u69cb")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"user\n\u2514\u2500dto\n\u2502 \u2514\u2500create-user.dto.ts\n\u2502 \u2502\n\u2502 \u2514\u2500update-user.dto.ts\n\u2502 \u2502\n\u2502 \u2514\u2500user.dto.ts\n\u2502 \u2502\n\u2502 \u2514\u2500index.ts\n\u2502\n\u2514\u2500interface\n\u2502 \u2514\u2500user.service.interface.ts\n\u2502\n\u2514\u2500user.controller.ts\n\u2502\n\u2514\u2500user.service.ts\n\u2502\n\u2514\u2500user.module.ts\n")),(0,s.kt)("h3",{id:"\u62c6\u5206\u908f\u8f2f\u5c64\u8207\u8cc7\u6599\u5c64"},"\u62c6\u5206\u908f\u8f2f\u5c64\u8207\u8cc7\u6599\u5c64"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u65b0\u589e user.repository.ts \u8207 user.repository.interface.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text",metastring:"{7,13}","{7,13}":!0},"user\n\u2514\u2500dto\n\u2502\n\u2514\u2500interface\n\u2502 \u2514\u2500user.service.interface.ts\n\u2502 \u2502\n\u2502 \u2514\u2500user.repository.interface.ts\n\u2502\n\u2514\u2500user.controller.ts\n\u2502\n\u2514\u2500user.service.ts\n\u2502\n\u2514\u2500user.repository.ts\n\u2502\n\u2514\u2500user.module.ts\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u5148\u5b9a\u7fa9 \u4ecb\u9762")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { UpdateUserDto, CreateUserDto, UserDto } from '../dto';\n\n\nexport interface UserRepositoryInterface {\n  /** \u4f7f\u7528 store id \u67e5\u51fa\u5e95\u4e0b\u6240\u6709\u7684\u4f7f\u7528\u8005\n   *\n   * @param storeId store id\n   * @returns user list\n   */\n  getByStoreId(storeId: string): Promise<Array<UserDto>>;\n\n  /** \u4f7f\u7528 user id \u67e5\u8a62\u4f7f\u7528\u8005\n   *\n   * @param id user id\n   * @returns user\n   */\n  getById(id: string): Promise<UserDto>;\n\n  /** \u65b0\u589e\u4f7f\u7528\u8005\n   *\n   * @param newUser new user\n   * @param userId update user id\n   * @returns new user list\n   */\n  createUser(newUser: CreateUserDto, userId: string): Promise<Array<UserDto>>;\n\n  /**\u66f4\u65b0\u4f7f\u7528\u8005\n   *\n   * @param id user id\n   * @param oldUser edit user\n   * @param userId update user id\n   * @returns user list\n   */\n  updaterUser(\n    id: string,\n    oldUser: UpdateUserDto,\n    userId: string,\n  ): Promise<Array<UserDto>>;\n\n  /**\u522a\u9664\u4f7f\u7528\u8005\n   *\n   * @param id user id\n   * @returns user list\n   */\n  deleteUser(id: string): Promise<Array<UserDto>>;\n}\n")),(0,s.kt)("h3",{id:"\u8a3b\u518a-repository"},"\u8a3b\u518a repository"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"user.module.ts")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts",metastring:"{13-16}","{13-16}":!0},"import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { UserRepository } from './user.repository';\n\n@Module({\n  controllers: [UserController],\n  providers: [\n    {\n      provide: 'UserServiceInterface',\n      useClass: UserService,\n    },\n    {\n      provide: 'UserRepositoryInterface',\n      useClass: UserRepository,\n    },\n  ],\n})\nexport class UserModule {}\n")),(0,s.kt)("h2",{id:"\u5148\u5beb\u6e2c\u8a66"},"\u5148\u5beb\u6e2c\u8a66"),(0,s.kt)("h3",{id:"\u6e2c\u8a66\u524d\u7f6e"},"\u6e2c\u8a66\u524d\u7f6e"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u5ba3\u544a\u6703\u7528\u5230\u7684\u670d\u52d9")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"import { ErrorCheckModule } from '../error-check/error-check.module';"),(0,s.kt)("p",{parentName:"admonition"},"\u7531\u65bc\u8def\u5f91\u4e26\u6c92\u6709\u8ddf ",(0,s.kt)("inlineCode",{parentName:"p"},"user.service.spec.ts")," \u540c\u4e00\u5c64\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"../")," \u5426\u5247\u6e2c\u8a66\u904b\u884c\u6642\u6703\u5403\u4e0d\u5230\u6a94\u6848")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Test, TestingModule } from '@nestjs/testing';\nimport { UserService } from './user.service';\nimport { UserDto } from './dto';\nimport { ErrorCheckModule } from '../error-check/error-check.module';\n\ndescribe('UserService', () => {\n  let userService: UserService;\n  let users: Array<UserDto>;\n});\n")),(0,s.kt)("h3",{id:"\u9032\u884c\u6a21\u7d44\u8a3b\u518a"},"\u9032\u884c\u6a21\u7d44\u8a3b\u518a"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u5c07\u6709\u7528\u5230\u7684\u5916\u90e8\u670d\u52d9 ",(0,s.kt)("inlineCode",{parentName:"p"},"ErrorCheckModule"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"UserRepository")," \u9032\u884c\u8a3b\u518a")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("inlineCode",{parentName:"p"},"UserRepositoryInterface")," \u9700\u8981\u4f7f\u7528 ",(0,s.kt)("inlineCode",{parentName:"p"},"useValue")," \u4f86\u70ba\u9019\u500b\u4ecb\u9762\u63d0\u4f9b\u5047\u7269\u4ef6")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"/** \u4e0a\u7565 */\n\ndescribe('UserService', () => {\n  let userService: UserService;\n  let userRepository: UserRepositoryInterface;\n  let errorCheckService: ErrorCheckServiceInterface;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports:[ErrorCheckModule],\n      providers: [\n        UserService,\n        {\n          provide: 'UserRepositoryInterface',\n          useValue: {\n            // \u5728\u9019\u88e1\u6a21\u64ec UserRepositoryInterface \u7684\u65b9\u6cd5\n            getByStoreId: jest.fn(),\n            getById: jest.fn(),\n            createUser: jest.fn(),\n            updaterUser: jest.fn(),\n            deleteUser: jest.fn(),\n          },\n        }\n      ],\n    }).compile();\n  });\n});\n")),(0,s.kt)("h3",{id:"\u5be6\u4f8b\u5316\u670d\u52d9"},"\u5be6\u4f8b\u5316\u670d\u52d9"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u5c07\u670d\u52d9\u5f9e IOC \u4e2d\u53d6\u51fa\uff0c\u4e26\u8ce6\u503c\u7d66\u7269\u4ef6")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"/** \u4e0a\u7565 */\n\ndescribe('UserService', () => {\n  let userService: UserService;\n  let userRepository: UserRepositoryInterface;\n  let errorCheckService: ErrorCheckServiceInterface;\n  let users: Array<UserDto>;\n\n  beforeEach(async () => {\n\n    const module: TestingModule = await Test.createTestingModule({\n      imports:[ErrorCheckModule],\n      providers: [\n        UserService,\n        {\n          provide: 'UserRepositoryInterface',\n          useValue: {\n            // \u5728\u9019\u88e1\u6a21\u64ec UserRepositoryInterface \u7684\u65b9\u6cd5\n            getByStoreId: jest.fn(),\n            getById: jest.fn(),\n            createUser: jest.fn(),\n            updaterUser: jest.fn(),\n            deleteUser: jest.fn(),\n          },\n        }\n      ],\n    }).compile();\n\n    userService = module.get<UserService>(UserService);\n  });\n});\n")),(0,s.kt)("h3",{id:"\u50b3\u5beb\u6e2c\u8a66\u7528\u5047\u7269\u4ef6\u8207\u8cc7\u6599"},"\u50b3\u5beb\u6e2c\u8a66\u7528\u5047\u7269\u4ef6\u8207\u8cc7\u6599"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u5c07\u670d\u52d9\u5f9e IOC \u4e2d\u53d6\u51fa\uff0c\u4e26\u8ce6\u503c\u7d66\u7269\u4ef6")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"/** \u4e0a\u7565 */\n\ndescribe('UserService', () => {\n  let userService: UserService;\n  let users: Array<UserDto>;\n\n  beforeEach(async () => {\n\n    users = new Array<UserDto>();\n    users.push({\n      id: 'f7541155-a4ff-4ca2-bfc5-a82ad98e2e86',\n      fullName: 'Big Pig',\n      email: 'BigPig@local.com',\n      phoneNumber: '0900000000',\n      userName: 'pig pig',\n    });\n\n    users.push({\n      id: '80f78f75-37b5-4977-bffc-5afc5db99123',\n      fullName: 'Pink Chicken',\n      email: 'PinkChicken@local.com',\n      phoneNumber: '0900000011',\n      userName: 'Hi Chicken',\n    });\n\n    const module: TestingModule = await Test.createTestingModule({\n      imports:[ErrorCheckModule],\n      providers: [\n        UserService,\n        {\n          provide: 'UserRepositoryInterface',\n          useValue: {\n            // \u5728\u9019\u88e1\u6a21\u64ec UserRepositoryInterface \u7684\u65b9\u6cd5\n            getByStoreId: jest.fn((storeId) => {\n              // \u5728\u9019\u88e1\u6a21\u64ec getByStoreId \u65b9\u6cd5\u7684\u884c\u70ba\n              if (storeId === 'validStoreId') {\n                return Promise.resolve(users);\n              } else {\n                return Promise.resolve([]); // \u8fd4\u56de\u4e00\u500b\u7a7a\u9663\u5217\u4f5c\u70ba\u6a21\u64ec\n              }\n            }),\n            getById: jest.fn((id) => {\n              return Promise.resolve(users.find((x) => x.id === id));\n            }),\n            createUser: jest.fn((newUser, userId) => {\n              users.push({\n                id: '99999999-37b5-4977-bffc-5afc5db99123',\n                fullName: newUser.fullName,\n                email: newUser.email,\n                phoneNumber: newUser.phoneNumber,\n                userName: newUser.userName,\n              });\n              return Promise.resolve(users);\n            }),\n            updaterUser: jest.fn((id, oldUser, userId) => {\n              let data = users.find((x) => x.id === id);\n              data.fullName = oldUser.fullName;\n              data.email = oldUser.email;\n              data.phoneNumber = oldUser.phoneNumber;\n              data.userName = oldUser.userName;\n              return Promise.resolve(users);\n            }),\n            deleteUser: jest.fn((id) => {\n              users = users.filter((x) => x, id !== id);\n              return Promise.resolve(users);\n            }),\n          },\n        }\n      ],\n    }).compile();\n\n    userService = module.get<UserService>(UserService);\n  });\n});\n")),(0,s.kt)("h2",{id:"\u64b0\u5beb\u6e2c\u8a66\u5287\u60c5"},"\u64b0\u5beb\u6e2c\u8a66\u5287\u60c5"),(0,s.kt)("h3",{id:"\u9700\u6c42-\u53d6\u5f97\u5546\u5e97\u4f7f\u7528\u8005"},"\u9700\u6c42: \u53d6\u5f97\u5546\u5e97\u4f7f\u7528\u8005"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"\u9700\u6c42: \u6211\u9700\u8981\u900f\u904e\u5546\u5e97 id \u4f86\u53d6\u5f97\uff0c\u5c6c\u65bc\u9019\u5bb6\u5e97\u7684\u4f7f\u7528\u8005"),(0,s.kt)("blockquote",{parentName:"blockquote"},(0,s.kt)("p",{parentName:"blockquote"},"\u6e2c\u8a66\u5287\u60c51 : \u50b3\u5165\u6b63\u78ba\u7684\u5546\u5e97 id\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u5c6c\u65bc\u9019\u5bb6\u5e97\u7684\u4f7f\u7528\u8005"),(0,s.kt)("p",{parentName:"blockquote"},"\u6e2c\u8a66\u5287\u60c52 : \u50b3\u5165\u4e0d\u5b58\u5728\u7684\u5546\u5e97 id\uff0c\u6703\u5f97\u5230\u4e00\u500b\u7a7a\u9663\u5217"),(0,s.kt)("p",{parentName:"blockquote"},"\u6e2c\u8a66\u5287\u60c53 : \u50b3\u5165\u7a7a\u7684\u5b57\u4e32\uff0c\u6703\u8df3\u51fa\u4f8b\u5916"),(0,s.kt)("p",{parentName:"blockquote"},"\u6e2c\u8a66\u5287\u60c54 : \u50b3\u5165\u7a7a\u7684\u5b57\u4e32\uff0c\u6703\u8df3\u51fa\u4f8b\u5916"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"   describe('getUserByStoreId', () => {\n    // case1\n    it('store id is validStoreId, return users list', async () => {\n      const storeId = 'validStoreId';\n\n      const actual = await userService.getUserByStoreId(storeId);\n\n      expect(actual).toStrictEqual(users);\n    });\n\n    // case2\n    it('store id is store123, return []', async () => {\n      const storeId = 'store123';\n\n      const actual = await userService.getUserByStoreId(storeId);\n\n      expect(actual).toStrictEqual([]);\n    });\n\n    // case3\n    it(\"store id is '', throw exception data cant not empty\", async () => {\n      const storeId = '';\n\n      const expectedError = new Error('storeId,\u8cc7\u6599\u4e0d\u80fd\u70ba\u7a7a\u6216\u672a\u5b9a\u7fa9');\n\n      await expect(\n        async () => await userService.getUserByStoreId(storeId),\n      ).rejects.toThrow(expectedError);\n    });\n\n    // case4\n    it('store id is undefined, throw exception data is undefined', async () => {\n      const storeId = undefined;\n\n      const expectedError = new Error('storeId,\u8cc7\u6599\u672a\u5b9a\u7fa9');\n\n      await expect(\n        async () => await userService.getUserByStoreId(storeId),\n      ).rejects.toThrow(expectedError);\n    });\n  });\n")),(0,s.kt)("h3",{id:"\u6e2c\u8a66\u7d30\u7bc0"},"\u6e2c\u8a66\u7d30\u7bc0"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"toStrictEqual")," : \u7528\u4f86\u6bd4\u5c0d\u9663\u5217\uff0c\u662f\u5426\u7b26\u5408\u9810\u671f"),(0,s.kt)("li",{parentName:"ul"},"\u6e2c\u8a66\u4f8b\u5916",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"\u5148\u5b9a\u7fa9\u4f8b\u5916\u7684\u8a0a\u606f\u6703\u56de\u50b3\u4ec0\u9ebc"),(0,s.kt)("li",{parentName:"ul"},"\u63a5\u4e0b\u4f86\u57f7\u884c\u65b7\u8a00"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"toThrow")," : \u7528\u4f86\u6bd4\u5c0d\u4f8b\u5916\u8a0a\u606f\u662f\u5426\u70ba\u9810\u671f\u7d50\u679c")))),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"\u6e2c\u8a66\u904e\u7a0b\u8981\u6ce8\u610f\u975e\u540c\u6b65\u7684\u554f\u984c\uff0c\u5982\u679c\u662f\u975e\u540c\u6b65\u57f7\u884c\uff0c\u9700\u8981\u9032\u884c ",(0,s.kt)("inlineCode",{parentName:"p"},"await"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"}," const expectedError = new Error('storeId,\u8cc7\u6599\u4e0d\u80fd\u70ba\u7a7a\u6216\u672a\u5b9a\u7fa9');\n\n await expect(\n   async () => await userService.getUserByStoreId(storeId),\n ).rejects.toThrow(expectedError);\n")),(0,s.kt)("admonition",{type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"\u70ba\u4ec0\u9ebc\u6e2c\u8a66\u4f8b\u5916\u7684 ",(0,s.kt)("inlineCode",{parentName:"p"},"expect(async () =>{...})")," \u9700\u8981\u7528\u5230\u7bad\u982d\u51fd\u5f0f\u5462?"),(0,s.kt)("p",{parentName:"admonition"},"\u4e3b\u8981\u7684\u539f\u56e0\u5728\u65bc\uff0c\u6703\u9700\u8981\u7528\u5230\u7269\u4ef6\u672c\u8eab\u7684 ref \uff0c\u624d\u4e0d\u6703\u5c0e\u81f4 ",(0,s.kt)("inlineCode",{parentName:"p"},"this")," \u6307\u5411 ",(0,s.kt)("inlineCode",{parentName:"p"},"caller"))),(0,s.kt)("h3",{id:"\u57f7\u884c\u6e2c\u8a66"},"\u57f7\u884c\u6e2c\u8a66"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm test:watch src/user/user.service.spec.ts\n")),(0,s.kt)("h3",{id:"\u6e2c\u8a66\u7d50\u679c"},"\u6e2c\u8a66\u7d50\u679c"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"}," PASS  src/user/user.service.spec.ts                                                                                                                                                                                  \n  UserService\n    \u221a should be defined (28 ms)                                                                                                                                                                                       \n    getUserByStoreId                                                                                                                                                                                                  \n      \u221a store id is validStoreId, return users list (8 ms)                                                                                                                                                            \n      \u221a store id is store123, return [] (3 ms)                                                                                                                                                                        \n      \u221a store id is '', throw exception data cant not empty (15 ms)                                                                                                                                                   \n      \u221a store id is undefined, throw exception data is undefined (4 ms)                                                                                                                                               \n                                                                                                                                                                                                                      \nWaiting for the debugger to disconnect...                                                                                                                                                                             \nWaiting for the debugger to disconnect...                                                                                                                                                                             \nWaiting for the debugger to disconnect...\nWaiting for the debugger to disconnect...                                                                                                                                                                             \nTest Suites: 1 passed, 1 total\nTests:       5 passed, 5 total\nSnapshots:   0 total\nTime:        5.932 s, estimated 11 s\n")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"\u5b8c\u6574\u6e2c\u8a66\u7a0b\u5f0f\u78bc"},"\u5b8c\u6574\u6e2c\u8a66\u7a0b\u5f0f\u78bc"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { Test, TestingModule } from '@nestjs/testing';\nimport { UserService } from './user.service';\nimport { UserDto } from './dto';\nimport { ErrorCheckModule } from '../error-check/error-check.module';\n\ndescribe('UserService', () => {\n  let userService: UserService;\n  let users: Array<UserDto>;\n\n  beforeEach(async () => {\n    users = new Array<UserDto>();\n    users.push({\n      id: 'f7541155-a4ff-4ca2-bfc5-a82ad98e2e86',\n      fullName: 'Big Pig',\n      email: 'BigPig@local.com',\n      phoneNumber: '0900000000',\n      userName: 'pig pig',\n    });\n\n    users.push({\n      id: '80f78f75-37b5-4977-bffc-5afc5db99123',\n      fullName: 'Pink Chicken',\n      email: 'PinkChicken@local.com',\n      phoneNumber: '0900000011',\n      userName: 'Hi Chicken',\n    });\n\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [ErrorCheckModule],\n      providers: [\n        UserService,\n        {\n          provide: 'UserRepositoryInterface',\n          useValue: {\n            // \u5728\u9019\u88e1\u6a21\u64ec UserRepositoryInterface \u7684\u65b9\u6cd5\n            getByStoreId: jest.fn((storeId) => {\n              // \u5728\u9019\u88e1\u6a21\u64ec getByStoreId \u65b9\u6cd5\u7684\u884c\u70ba\n              if (storeId === 'validStoreId') {\n                return Promise.resolve(users);\n              } else {\n                return Promise.resolve([]); // \u8fd4\u56de\u4e00\u500b\u7a7a\u9663\u5217\u4f5c\u70ba\u6a21\u64ec\n              }\n            }),\n            getById: jest.fn((id) => {\n              return Promise.resolve(users.find((x) => x.id === id));\n            }),\n            createUser: jest.fn((newUser, userId) => {\n              users.push({\n                id: '99999999-37b5-4977-bffc-5afc5db99123',\n                fullName: newUser.fullName,\n                email: newUser.email,\n                phoneNumber: newUser.phoneNumber,\n                userName: newUser.userName,\n              });\n              return Promise.resolve(users);\n            }),\n            updaterUser: jest.fn((id, oldUser, userId) => {\n              const data = users.find((x) => x.id === id);\n              data.fullName = oldUser.fullName;\n              data.email = oldUser.email;\n              data.phoneNumber = oldUser.phoneNumber;\n              data.userName = oldUser.userName;\n              return Promise.resolve(users);\n            }),\n            deleteUser: jest.fn((id) => {\n              users = users.filter((x) => x, id !== id);\n              return Promise.resolve(users);\n            }),\n          },\n        },\n      ],\n    }).compile();\n\n    userService = module.get<UserService>(UserService);\n  });\n\n  it('should be defined', () => {\n    expect(userService).toBeDefined();\n  });\n\n  describe('getUserByStoreId', () => {\n    // case1\n    it('store id is validStoreId, return users list', async () => {\n      const storeId = 'validStoreId';\n\n      const actual = await userService.getUserByStoreId(storeId);\n\n      expect(actual).toStrictEqual(users);\n    });\n\n    // case2\n    it('store id is store123, return []', async () => {\n      const storeId = 'store123';\n\n      const actual = await userService.getUserByStoreId(storeId);\n\n      expect(actual).toStrictEqual([]);\n    });\n\n    // case3\n    it(\"store id is '', throw exception data cant not empty\", async () => {\n      const storeId = '';\n\n      const expectedError = new Error('storeId,\u8cc7\u6599\u4e0d\u80fd\u70ba\u7a7a\u6216\u672a\u5b9a\u7fa9');\n\n      await expect(\n        async () => await userService.getUserByStoreId(storeId),\n      ).rejects.toThrow(expectedError);\n    });\n\n    // case4\n    it('store id is undefined, throw exception data is undefined', async () => {\n      const storeId = undefined;\n\n      const expectedError = new Error('storeId,\u8cc7\u6599\u672a\u5b9a\u7fa9');\n\n      await expect(\n        async () => await userService.getUserByStoreId(storeId),\n      ).rejects.toThrow(expectedError);\n    });\n  });\n});\n")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"ref"},"REF"),(0,s.kt)("p",null,"\u6881\u5927\u54e5\u6559\u5b78"))}p.isMDXComponent=!0}}]);